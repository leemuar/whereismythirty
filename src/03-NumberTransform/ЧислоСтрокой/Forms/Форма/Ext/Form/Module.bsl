
// Возвращает значение разряда из массива разрядов по индексу
// Вернет 0, если по указанному индексу нет значения
//
// Параметры:
//  Разряды  - Массив - Массив чисел
//
//  Индекс  - Число - Индекс, значение по которому нужно вернуть
//
// Возвращаемое значение:
//   Число   - Значение по индексу из массив или 0, если индекса не существует в массиве
//
&НаКлиенте
Функция ПолучитьЗначениеРазряда(Знач Разряды, Знач Индекс)

	// если индекс есть в массиве - вернуть значение по индексу, иначе вернуть Неопредедено
	Возврат ?(Индекс <= Разряды.ВГраница(), Разряды[Индекс], 0);

КонецФункции


// Возвращает прописное название единицы
//
// Параметры:
//  Единица  - Число - Число (0-9), для которого нужно получить прописное название
//
// Возвращаемое значение:
//   Строка   - Прописное название числа
//
&НаКлиенте
Функция ПолучитьНазваниеЕдиницы(Знач Единица, Знач ИндексРазряда)

	// для разряда, словесное название которого женского рода, некоторые названия единиц будут свои
	ИндексРазрядаЖенскогоРода = 1;
	
	Названия = Новый Соответствие();
	Названия.Вставить(0, "");
	Названия.Вставить(1, ?(ИндексРазряда = ИндексРазрядаЖенскогоРода, "одна", "один"));
	Названия.Вставить(2, ?(ИндексРазряда = ИндексРазрядаЖенскогоРода,"две", "два"));
	Названия.Вставить(3, "три");
	Названия.Вставить(4, "четыре");
	Названия.Вставить(5, "пять");
	Названия.Вставить(6, "шесть");
	Названия.Вставить(7, "семь");
	Названия.Вставить(8, "восемь");
	Названия.Вставить(9, "девять");
	
	Возврат Названия.Получить(Единица);

КонецФункции // ПолучитьНазваниеЕдиниц()


// Возвращает прописное название десятка
//
// Параметры:
//  ЧислоДесятка  - Число - Число десятка (2-9), для которого нужно получить прописное название
//
// Возвращаемое значение:
//   Строка   - Прописное название десятка
//
&НаКлиенте
Функция ПолучитьНазваниеДесятка(Знач ЧислоДесятка)

	Названия = Новый Соответствие();
	Названия.Вставить(2, "двадцать");
	Названия.Вставить(3, "тридцать");
	Названия.Вставить(4, "сорок");
	Названия.Вставить(5, "пятьдесят");
	Названия.Вставить(6, "шестьдесят");
	Названия.Вставить(7, "семьдесят");
	Названия.Вставить(8, "восемьдесят");
	Названия.Вставить(9, "девяносто");
	
	Возврат Названия.Получить(ЧислоДесятка);

КонецФункции


// Возвращает прописное название чисел от 10 до 19
//
// Параметры:
//  Число  - Число - Число, прописное название которого требуется получить
//
// Возвращаемое значение:
//   Строка   - Прописное название числа
//
&НаКлиенте
Функция ПолучитьНазвание10_19(Знач Число)

	Названия = Новый Соответствие;
	Названия.Вставить(10, "десять");
	Названия.Вставить(11, "одиннадцать");
	Названия.Вставить(12, "двенадцать");
	Названия.Вставить(13, "тринадцать");
	Названия.Вставить(14, "четырнадцать");
	Названия.Вставить(15, "пятнадцать");
	Названия.Вставить(16, "шестнадцать");
	Названия.Вставить(17, "семнадцать");
	Названия.Вставить(18, "восемнадцать");
	Названия.Вставить(19, "девятнадцать");
	
	Возврат Названия.Получить(Число) ;

КонецФункции // ПолучитьНазвания10_19()


// Возвращает прописаное название сотни
//
// Параметры:
//  ЧислоСотни  - Число - Число (1 цифра), обозначающее сотню
//
// Возвращаемое значение:
//   Строка   - Прописное название сотни
//
&НаКлиенте
Функция ПолучитьНазваниеСотни(Знач ЧислоСотни)

	Названия = Новый Соответствие();
	
	Названия.Вставить(1, "сто");
	Названия.Вставить(2, "двести");
	Названия.Вставить(3, "триста");
	Названия.Вставить(4, "четыреста");
	Названия.Вставить(5, "пятьсот");
	Названия.Вставить(6, "шестьсот");
	Названия.Вставить(7, "семьсот");
	Названия.Вставить(8, "восемьсот");
	Названия.Вставить(9, "девятьсот");
	
	Возврат Названия.Получить(ЧислоСотни);

КонецФункции


// Определяет имеет ли двузначное число собственное название
//
// Параметры:
//  Число  - Число - Число, для которого определяется имеет оно свое название или нет
//
// Возвращаемое значение:
//   Булево   - Истина - число имеет собственное название, Ложь - не имеет
//
&НаКлиенте
Функция ИмеетСвоеНазвание(Знач Число)

	Возврат (10 <= Число И Число <= 19);

КонецФункции


// Возвращает словесное название степеней тысячи по индексу разряда
//
// Параметры:
//  ИндексРазрядаТысячи  - Число - Индекс разряда тысячи
//
// Возвращаемое значение:
//   Строка   - прописное название степени тысячи
//
&НаКлиенте
Функция ПолучитьНазваниеТысячи(Знач ИндексРазрядаТысячи, Знач ЕстьСвоеНазваниеДвухЗнаков, Знач ЗначениеЕдиницы)

	Перем иОкончаниеДляЕдиницы, иОкончаниеДля2_4, иОкончаниеПрочие;
	
	// индекс в строке словаря, окончание для единицы (1 тысяч[а], 1 миллион[])
	иОкончаниеДляЕдиницы = 0;
	// индекс в строке словаря, окончание для 2-4 (2 тысяч[и], 2 миллион[а])
	иОкончаниеДля2_4 = 1;
	// индекс в строке словаря, окончание для единицы (10 тысяч[], 10 миллион[ов])
	иОкончаниеПрочие = 2;

	
	// название степени состоит из корня слова и окончания
	//     1 миллион, 2 миллион(а), 12 миллион(ов)
	//     1 тысяч(а), 2 тысяч(и), 12 тысяч
	//
	// Окончание определяется от последней цифры разряда и от того, имеет число
	// из двух последних разрядов собственное наименование.
	// Например:
	//     12 миллион[ов] - 12 имеет собственное название ("двенадцать") окончание "ов"), 
	//     32 миллион[а] - не имеет своего названия, для определения окончания используется последняя цифра (2)

	// Окончание также зависит от рода слова, к которому оно присоединяется
	// В русском языке только одно название степени тысячи женского рода - "тысяча",
	// все остальные - мужского
	// Для всех числительных мужского рода окончания одинаковы, для тысячи - свои
	
	// Для каждого рода окончания разные в трех случаях:
	//    - для единицы (1) (1 миллион[], 1 тысяч[а])
	//    - для чисел от 2 до 4 включительно (2 миллион[а], 2 тысяч[и])
	//    - для всего остального (10 миллион[ов], 10 тысяч[])

	Корни = Новый Соответствие();
	Корни.Вставить(0,"");
	Корни.Вставить(1,"тысяч");
	Корни.Вставить(2,"миллион");
	Корни.Вставить(3,"миллиард");
	Корни.Вставить(4,"биллион");
	Корни.Вставить(5,"биллиард");
	Корни.Вставить(6,"триллион");
	Корни.Вставить(7,"триллиард");
	Корни.Вставить(8,"квадриллион");
	Корни.Вставить(9,"квадриллиард");
	Корни.Вставить(10,"квинтиллион");
	Корни.Вставить(11,"квинтиллиард");
	
	// словарь окончаний для женских степеней тысяч (для слова "тысяча")
	ОкончанияЖенский = Новый Массив();
	ОкончанияЖенский.Вставить(иОкончаниеДляЕдиницы, "а");
	ОкончанияЖенский.Вставить(иОкончаниеДля2_4, "и");
	ОкончанияЖенский.Вставить(иОкончаниеПрочие, "");
	
	// словарь окончания для мужских степеней ("миллион", "квадриллион" и пр)
	ОкончанияМужской = Новый Массив();
	ОкончанияМужской.Вставить(иОкончаниеДляЕдиницы, "");
	ОкончанияМужской.Вставить(иОкончаниеДля2_4, "а");
	ОкончанияМужской.Вставить(иОкончаниеПрочие, "ов");
	
	// словарь окончаний, который будем использовать при создании полного прописного названия
	ЭтоЖенскийРод = (1 = ИндексРазрядаТысячи);
	СловарьОкончаний = ?(ЭтоЖенскийРод, ОкончанияЖенский, ОкончанияМужской);
	
	// определим какой индекс окончаний использовать
	ИндексОкончания = 0;
	Если ЕстьСвоеНазваниеДвухЗнаков Тогда
		ИндексОкончания = иОкончаниеПрочие;
	ИначеЕсли 1 = ЗначениеЕдиницы Тогда
		ИндексОкончания = иОкончаниеДляЕдиницы;
	ИначеЕсли 2 <= ЗначениеЕдиницы И ЗначениеЕдиницы <= 4 Тогда
		ИндексОкончания = иОкончаниеДля2_4;
	Иначе
		ИндексОкончания = иОкончаниеПрочие;
	КонецЕсли;
	
	Результат = "";
	Корень = Корни.Получить(ИндексРазрядаТысячи);
	// добавим окончание только если корень был найден в словаре
	Если ЗначениеЗаполнено(Корень)Тогда
		Результат = Корень + СловарьОкончаний[ИндексОкончания]
	КонецЕсли;
	
	Возврат Результат;

КонецФункции


// Разбивает число на указанное количество разрядов
//
// Например, для РазбитьНаРазряды(132, 1) - [3,2,1]
// РазбитьНаРазряды(1234567, 3) - [567, 234, 1]
//
// Параметры:
//  РазбиваемоеЧисло  - Число - Число, которое требуется разбить на разряды
//
//  КоличествоРазрядов  - Число - Количество разрядов
//
// Возвращаемое значение:
//   Массив   - Массив с разрядами. 
//              Первыми в массиве идут единицы числа: для РазбитьНаРазряды(132, 1) вернется массив [3,2,1]
//
&НаКлиенте
Функция РазбитьНаРазряды(Знач РазбиваемоеЧисло, КоличествоРазрядов = 1)

	Разряды = Новый Массив();
	
	Делитель = Pow(10, КоличествоРазрядов);
	Остаток = РазбиваемоеЧисло;
	Пока Истина Цикл
		Если Остаток <= 0 Тогда
			Прервать;
		КонецЕсли;
		
		Разряд = Остаток % Делитель;
		Разряды.Добавить(Разряд);
		Остаток = Цел(Остаток/Делитель);
	КонецЦикла;
	
	Возврат Разряды;

КонецФункции


// Формирует число прописью (словами)
//
// Например, 123 - сто двадцать три; 352563 - триста пятдесят
//
// Параметры:
//  Число  - Число - <описание параметра>Число, словестное представление которого требуется получитьродолжение описания параметра>
//
// Возвращаемое значение:
//   Строка   - Число прописью (словами)
//
&НаКлиенте
Функция ПолучитьЧислоПрописью(Знач Число)

	Результат = "";
	
	СоставПрописи = Новый Массив;
	
	// разбить на тысячи
	РазрядыТысяч = РазбитьНаРазряды(Число, 3);
	// для каждого разряда тысячи ...
	ИндексПоследнегоРазряда = РазрядыТысяч.ВГраница();
	ИндексТекущегоРазрядаТысячи = ИндексПоследнегоРазряда;
	Пока 0 <= ИндексТекущегоРазрядаТысячи Цикл
		РазрядЦеликом = РазрядыТысяч[ИндексТекущегоРазрядаТысячи];
		СоставРазряда = РазбитьНаРазряды(РазрядЦеликом, 1);
		Единица = ПолучитьЗначениеРазряда(СоставРазряда, 0);
		Десяток = ПолучитьЗначениеРазряда(СоставРазряда, 1);
		Сотня = ПолучитьЗначениеРазряда(СоставРазряда, 2);
		// двузначные числа 10-19 имеют собственные названия, выделим двузначное число
		ДваЗнака = РазрядЦеликом % 100;
		
		// добавим сотни
		// Для производительности формируем название только если цифра сотни
		// имеет название (все кроме 0 имеет название)
		Если 0 <> Сотня Тогда 
			СоставПрописи.Добавить(ПолучитьНазваниеСотни(Сотня));
		КонецЕсли;
		
		// добавим десятки и единицы
		ЕстьСвоеНазваниеДвухЗнаков = ИмеетСвоеНазвание(ДваЗнака);
		Если ЕстьСвоеНазваниеДвухЗнаков Тогда
			// числа от 10 до 19 имеют собственное название
			СоставПрописи.Добавить(ПолучитьНазвание10_19(ДваЗнака));
		Иначе
			// другие двузначные числа формируются как НазваниеДесятка + НазваниеЕдиниц (23 - двадцать три)
			
			// сформируем название десятка
			// Для производительности формируем название только если цифра десятка
			// имеет название (все кроме 0 имеет название)
			Если 0 <> Десяток Тогда
				СоставПрописи.Добавить(ПолучитьНазваниеДесятка(Десяток));
			КонецЕсли;
			
			// сформируем название единицы
			// Для производительности формируем название только если цифра единицы
			// имеет название (все кроме 0 имеет название)
			Если 0 <> Единица тогда
				СоставПрописи.Добавить(ПолучитьНазваниеЕдиницы(Единица, ИндексТекущегоРазрядаТысячи));
			КонецЕсли;
			
		КонецЕсли;
		
		// добавим название разряда тысяч
		// Не нужно выводить название разряда, если оно состоит только из нулей
		Если 0 <> РазрядЦеликом Тогда
			СоставПрописи.Добавить(ПолучитьНазваниеТысячи(ИндексТекущегоРазрядаТысячи, ЕстьСвоеНазваниеДвухЗнаков, Единица));
		КонецЕсли;
		
		// следующий разряд
		ИндексТекущегоРазрядаТысячи = ИндексТекущегоРазрядаТысячи - 1;
		
	КонецЦикла;
	
	// соединим массив составных частей прописи в одну строку
	Результат = СтрСоединить(СоставПрописи, " ");
	
	Возврат Результат;

КонецФункции


// Выводит пропись числа
//
// Параметры:
//  Число  - Число - Число для вывода
//
&НаКлиенте
Процедура ВывестиЧислоПрописью(Знач Число)

	Сообщить(ПолучитьЧислоПрописью(Число));

КонецПроцедуры


&НаКлиенте
Процедура ЧислоДляПрописиПриИзменении(Элемент)
	ВывестиЧислоПрописью(ЧислоДляПрописи);
КонецПроцедуры


&НаКлиенте
Процедура ПолныйТест(Команда)
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Для ПроверяемоеЧисло = ТестЧислоОт По ТестЧислоДо Цикл
		Левое = ЧислоПрописью(ПроверяемоеЧисло);
		Правое = ПолучитьЧислоПрописью(ПроверяемоеЧисло);
		Если Левое <> Правое Тогда
			Сообщить(ПроверяемоеЧисло);
			Сообщить("Платформа: " + Левое);
			Сообщить("Функция: " + Правое);
		КонецЕсли;
	КонецЦикла;
	
	ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Сообщить("Тест пройден за " + (ВремяОкончания - ВремяНачала) / 1000 + " сек");
	
КонецПроцедуры